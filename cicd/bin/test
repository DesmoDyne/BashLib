#!/usr/bin/env bash

# test
#
# test artifacts of this project
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2016-06-16


# NOTE: see build script for some possibly informative comments


echo
echo 'test project artifacts'
echo


# TODO: run this in docker image:
#       https://github.com/bats-core/bats-core#running-bats-in-docker


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
path_to_proj_root='../..'

# path to BashLib library file, relative to project root
# NOTE: use local file as that is always the latest version
path_to_bashlib='code/lib/dd-bash-lib.sh'

# path to script configuration file, relative to project root
path_to_conf_file="cicd/conf/$(basename "${BASH_SOURCE[0]}").yaml"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('bats' 'realpath')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# configure script parameters

# absolute, canonical path to BashLib library file
# NOTE: can not safely use realpath here yet
path_to_bashlib="${here}/${path_to_proj_root}/${path_to_bashlib}"


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# absolute, canonical path to project root
path_to_proj_root="$(realpath "${here}/${path_to_proj_root}")"

# absolute, canonical path to configuration file
path_to_conf_file="${path_to_proj_root}/${path_to_conf_file}"


# -----------------------------------------------------------------------------
# load script configuration

# shellcheck disable=SC2034
attrs=(path_to_bats_folder)
# shellcheck disable=SC2034
opt_attrs=()

echo
echo 'Load script configuration file:'
if ! get_attrs_from_yaml_file "${path_to_conf_file}" attrs opt_attrs
then
    exit 1
fi


# -----------------------------------------------------------------------------
# test this project

if ! pushd "${path_to_proj_root}" > /dev/null
then
    echo "Failed to pushd to project root ${path_to_proj_root}"
    exit 1
fi

# NOTE: printing from a test function to >&3
# requires running bats with --tap, e.g.
#   bats --tap "${path_to_bats_folder}"
# https://github.com/bats-core/bats-core#printing-to-the-terminal

echo
echo 'Run tests:'

# NOTE: run single test suite using e.g.
# bats "${path_to_bats_folder}/_log.bats"

# bats displays its own output
# shellcheck disable=SC2154
bats "${path_to_bats_folder}"
exit_code="$?"

if ! popd > /dev/null
then
    echo "Failed to popd from project root ${path_to_proj_root}"
    exit 1
fi


echo
echo 'project artifacts test complete'
echo


exit ${exit_code}
